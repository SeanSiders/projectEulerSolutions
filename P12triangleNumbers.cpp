#include <iostream>
#include "lib.hpp"

/*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?*/

uint64_t totalDivisors(const uint64_t& triangleNumber)
{
    uint64_t totalDivisors = 2;
    for (uint64_t divisor = 2; divisor < triangleNumber; divisor++)
    {
        if (triangleNumber % divisor == 0)
        {
            totalDivisors++;
        }
    }

    return totalDivisors;
}

int main()
{
    uint64_t n;
    std::cin >> n;
    uint64_t divisors = 0;
    uint64_t triangleNumber;
    uint64_t i = 3;

    while (divisors < n)
    {
        triangleNumber = i * (i + 1) / 2;
        divisors = totalDivisors(triangleNumber);
        i *= 10;

        std::cout << triangleNumber << " " << divisors << "\n";
    }

    std::cout << triangleNumber << " " << divisors << "\n";

    return 0;
}